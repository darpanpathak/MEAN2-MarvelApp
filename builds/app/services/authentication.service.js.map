{"version":3,"sources":["services/authentication.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAAuB,iBAAiB,CAAC,CAAA;AACzC,qBAAqB,eAAe,CAAC,CAAA;AACrC,wBAA+B,mBAAmB,CAAC,CAAA;AAEnD,gCAAgC,8BAA8B,CAAC,CAAA;AAG/D;IAEI,+BAAoB,MAAc,EAAU,IAAU;QAAlC,WAAM,GAAN,MAAM,CAAQ;QAAU,SAAI,GAAJ,IAAI,CAAM;IAAI,CAAC;IAE3D,sCAAM,GAAN;QACI,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACpC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACpC,CAAC;IAED,qCAAK,GAAL,UAAM,IAAU;QAAhB,iBAoBC;QAnBG,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,wBAAc,EAAE,CAAC;aAC/D,SAAS,CACV,UAAA,QAAQ;YACJ,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;gBACrD,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxE,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC3E,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC,EACD,UAAA,KAAK;YACD,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YAC1B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IAEX,CAAC;IAED,0CAAU,GAAV;QACI,EAAE,CAAC,CAAC,iCAAe,EAAE,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QAChB,IAAI;YACA,MAAM,CAAC,KAAK,CAAC;IACrB,CAAC;IAtCL;QAAC,iBAAU,EAAE;;6BAAA;IAuCb,4BAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,6BAAqB,wBAsCjC,CAAA","file":"authentication.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Http } from '@angular/http';\r\nimport { contentHeaders } from '../common/headers';\r\nimport { User } from '../models/user.model';\r\nimport { tokenNotExpired } from 'angular2-jwt/angular2-jwt.js';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n\r\n    constructor(private router: Router, private http: Http) { }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"id_token\");\r\n        localStorage.removeItem(\"username\");\r\n        this.router.navigate(['login']);\r\n    }\r\n\r\n    login(user: User) {\r\n        let body = JSON.stringify(user);\r\n        this.http.post('/api/auth/login', body, { headers: contentHeaders })\r\n            .subscribe(\r\n            response => {\r\n                if (JSON.stringify(response.json().success) === \"true\") {\r\n                    localStorage.setItem('id_token', JSON.stringify(response.json().token));\r\n                    localStorage.setItem('username', JSON.stringify(response.json().username));\r\n                    this.router.navigate(['home']);\r\n                }\r\n                else {\r\n                    window.alert(JSON.stringify(response.json().message));\r\n                }\r\n            },\r\n            error => {\r\n                alert(error.text());\r\n                console.log(error.text());\r\n                return false;\r\n            });\r\n\r\n    }\r\n\r\n    isLoggedin() {\r\n        if (tokenNotExpired())\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n}"]}